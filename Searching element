public class BinTree {
    

    public BinTree() // constructor
    {
        theBTRootNode = null;
    }
// ----- Search for node
    //              to BNode or null if not found--------
    protected BNode search(BNode theRootNode, String Name) {
        //if the root is null returns null
        if (theRootNode == null) {
            return null;
        } else {
            //checks if they are equal
            if (Name.compareTo(theRootNode.anyClass.name) == 0) {
                return theRootNode;
            //checks if the name is smaller than the current
            //record  if smaller traverses to the left
            } else if (Name.compareTo(theRootNode.anyClass.name) > 0) {
                return search(theRootNode.leftBNode, Name);
            } else {
                // if bigger traverses to the left
                return search(theRootNode.rightBNode, Name);
            }
        }
    } 

    //the AnyClass object matched with the Name
    public AnyClass searchBST(String keyName) {
        BNode temp = search(theBTRootNode, Name);
        if (temp == null) {
      //noresults found
           return null;
        } else {
         //result found
           return temp.anyClass;
        }
    }
}
